#
# This file is part of the ONEMA onema Package.
# For the full copyright and license information,
# please view the LICENSE file that was distributed
# with this source code.
#
# copyright (c) 2021, Juan Manuel Torres (http://onema.io)
#
# @author Juan Manuel Torres <software@onema.io>
#
service: manifest-service

provider:
  name: aws
  runtime: java11
  profile: ${opt:profile, 'default'}
  timeout: 30
  versionFunctions: false
  memorySize: 1024
  stage: dev
  region: us-east-1
  apiGateway:
    binaryMediaTypes:
      - "*/*"
  environment:
    LOG_LEVEL: INFO
    TABLE_NAME:
      Ref: VideoTable
    QUEUE_URL:
      Ref: TranscodeLoadingQueue

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:Get*
        - s3:Put*
      Resource:
        - Fn::Join: [ "/", [ Fn::GetAtt: [ InputBucket, Arn ], "*" ] ]
        - Fn::GetAtt: [ InputBucket, Arn ]
        - Fn::Join: [ "/", [ Fn::GetAtt: [ OutputBucket, Arn ], "*" ] ]
        - Fn::GetAtt: [ OutputBucket, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - Fn::GetAtt: [ VideoTable, Arn ]
        - Fn::Join: [ "/", [ Fn::GetAtt: [ VideoTable, Arn ], "index", "*" ] ]
    - Effect: Allow
      Action:
        - s3:List*
        - sns:List*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - sqs:ListQueues
        - sqs:DeleteMessage*
        - sqs:SendMessage*
        - sqs:ReceiveMessage
      Resource:
        - Fn::GetAtt: [ TranscodeLoadingQueue, Arn ]
    - Effect: Allow
      Action:
        - mediaconvert:GetJob
        - mediaconvert:ListTagsForResource
        - mediaconvert:GetJobTemplate
        - mediaconvert:UntagResource
        - mediaconvert:TagResource
        - mediaconvert:CreateJob
      Resource:
        - Fn::GetAtt: [StreamingServiceMediaConvert, Arn]
        - Fn::Join: ["", ["arn:aws:mediaconvert:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":jobs/*"] ]
        - Fn::Join: ["", ["arn:aws:mediaconvert:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":queues/*"] ]
        - Fn::Join: ["", ["arn:aws:mediaconvert:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":presets/allow*"] ]
    - Effect: Allow
      Action:
        - mediaconvert:ListQueues
        - mediaconvert:DescribeEndpoints
        - mediaconvert:ListPresets
        - mediaconvert:ListJobTemplates
      Resource: "*"
    - Effect: Allow
      Action:
        - iam:PassRole
        - iam:ListRoles
      "Resource":
        - "arn:aws:iam::*:role/*"

package:
  artifact: transcode/build/libs/transcode-0.0.1-SNAPSHOT-all.jar

functions:
  master:
    memorySize: 8192
    handler: io.onema.streaming.manifestservice.StreamLambdaHandler::handleRequest
    environment:
      ORIGIN:
        Fn::Join: [ "", ["s3://", Fn::GetAtt: [ OutputBucket, DomainName ], "/"] ]
    package:
      artifact: manifest-service/build/libs/manifest-service-0.0.1-SNAPSHOT-all.jar
    events:
      - http:
          path: "video/{videoName}/master.m3u8"
          method: get
      - http:
          path: "video/{videoName}/media/{mediaName}"
          method: get
      - http:
          path: "video/{videoName}/media/segment/{segmentName}"
          method: get

  transcodingJob:
    handler: io.onema.streaming.transcode.transcoderstarter.TranscodeStarterFunction::handleRequest
    environment:
      JOB_TEMPLATE_NAME:
        Ref: StreamingServiceMediaConvert
      OUTPUT_BUCKET_NAME:
        Ref: OutputBucket
      MEDIA_CONVERT_ROLE:
        Fn::GetAtt : [MediaConvertRole, Arn]

    events:
      - s3:
          bucket:
            Ref: InputBucket
          event: s3:ObjectCreated:*
          existing: true

  metadataGeneration:
    handler: io.onema.streaming.transcode.metadatageneration.MetadataGenerationFunction::handleRequest
    timeout: 300
    memorySize: 2048
    layers:
      - arn:aws:lambda:us-east-1:065150860170:layer:ffmpeg:3
    events:
      - s3:
          bucket:
            Ref: OutputBucket
          event: s3:ObjectCreated:*
          rules:
            - suffix: .ts
          existing: true

  metadataLoader:
    handler: io.onema.streaming.transcode.metadataloader.MetadataLoaderFunction::handleRequest
    timeout: 300
    memorySize: 2048
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ TranscodeLoadingQueue, Arn ]

resources:
  Resources:
    VideoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE

    TranscodeLoadingQueue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 600

    InputBucket:
      Type: AWS::S3::Bucket
    OutputBucket:
      Type: AWS::S3::Bucket

    StreamingServiceMediaConvert:
      Type: AWS::MediaConvert::JobTemplate
      Properties:
        Description: Streaming service media convert for HLS
        SettingsJson: ${file(media-convert-settings.yml)}
        StatusUpdateInterval: SECONDS_30

    MediaConvertRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - mediaconvert.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  Outputs:
    InputBucketName:
      Value:
        Ref: InputBucket
      Description: ARN of S3 bucket where the original videos are uploaded
    OutputBucketName:
      Value:
        Ref: OutputBucket
      Description: ARN of S3 bucket where the transcoded videos and metadata will be stored
